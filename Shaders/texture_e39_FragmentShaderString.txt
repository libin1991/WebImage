precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;
uniform sampler2D SamplerBackTex1;

 vec3 exclude(vec3 src1, vec3 src2, float alpha)
 {
     return mix(src1, src1 + src2 - src1 * src2 * 2.0, alpha);
 }

 vec3 linearDodge(vec3 src1, vec3 src2, float alpha)
 {
     return mix(src1, min(src1 + src2, 1.0), alpha);
 }

  vec3 hardMix(vec3 src1, vec3 src2, float alpha)
 {
     src2.r = src2.r < 1.0 - src1.r ? 0.0 : 1.0;
     src2.g = src2.g < 1.0 - src1.g ? 0.0 : 1.0;
     src2.b = src2.b < 1.0 - src1.b ? 0.0 : 1.0;
     
     return mix(src1, src1, alpha);
 }

void main(void)
{
    vec3 src = texture2D(inputImageTexture, textureCoordinate).rgb;
    vec4 tex = texture2D(SamplerBackTex1, textureCoordinate);
    float f = (tex.r + tex.g + tex.b) / 3.0;
    vec4 tmp = vec4(f,f,f,tex.a);
    src = exclude(src, tex.rgb, tex.a * 0.87);
    src = linearDodge(src, tmp.rgb, tmp.a * 0.65);
    src = hardMix(src, tmp.rgb, tmp.a * 0.16);
    
    gl_FragColor = vec4(src, 1.0);
}