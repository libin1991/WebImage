precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;

const vec2 vignetteCenter = vec2(0.5, 0.5);   // the center for the vignette in tex coords (defaults to 0.5, 0.5)
uniform highp float vignetteStart;  // The normalized distance from the center where the vignette effect starts. Default of 0.
uniform highp float vignetteRange;  // The normalized range from the vignette effect start and ends. Default of 0.5.
uniform highp float aspectRatio;

uniform float saturate;
uniform float bound_l;
uniform float strength;

vec3 colorMono(vec3 src)
{
    return src * mat3
    (
     0.299, 0.587, 0.114,
     0.299, 0.587, 0.114,
     0.299, 0.587, 0.114
     );
}

void main()
{
    vec3 src = texture2D(inputImageTexture, textureCoordinate).rgb;
    
    
    highp vec2 textureCoordinateToUse = vec2(textureCoordinate.x, (textureCoordinate.y * aspectRatio + 0.5 - 0.5 * aspectRatio));
    highp float d = distance(textureCoordinateToUse, vignetteCenter);
    highp float percent = clamp((d-vignetteStart)/vignetteRange, 0.0, 1.0);
    float alpha = 1.0 -percent * percent;
    
    src = colorMono(src);
    
    float lum = src.r*0.299 + src.g*0.587 + src.b*0.114;
    vec3 tmp_s = lum*(1.0-saturate) + saturate*src;
    tmp_s = (tmp_s - bound_l)/saturate;
    
    gl_FragColor = vec4(tmp_s * alpha, 1.0);
}