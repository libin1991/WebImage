precision highp float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;
uniform sampler2D SamplerTableTex1;

vec3 blackWhite(vec3 src)
{
    float f = (max(max(src.r, src.g), src.b) + min(min(src.r, src.g), src.b)) / 2.0;
    return vec3(f, f, f);
}

vec3 tableLookUp(vec3 src, sampler2D table)
{
 src.r = texture2D(table, vec2(src.r, 0.0)).r;
 src.g = texture2D(table, vec2(src.g, 0.0)).g;
 src.b = texture2D(table, vec2(src.b, 0.0)).b;
 return src;
}

vec3 levelSP(vec3 src, float dark, float light)  //dark,light: (0~1)
{
 float range  = light - dark;
 
 if(src.r < dark)
     src.r = 0.0;
 else if(src.r > light)
     src.r = 1.0;
 else
 {
     float a = (light - src.r) / range;
     float b = (src.r - dark) / range;
     src.r = clamp(a * dark + b * light, 0.0, 1.0);
 }
 
 if(src.g < dark)
     src.g = 0.0;
 else if(src.g > light)
     src.g = 1.0;
 else
 {
     float a = (light - src.g) / range;
     float b = (src.g - dark) / range;
     src.g = clamp(a * dark + b * light, 0.0, 1.0);
 }
 if(src.b < dark)
     src.b = 0.0;
 else if(src.b > light)
     src.b = 1.0;
 else
 {
     float a = (light - src.b) / range;
     float b = (src.b - dark) / range;
     src.b = clamp(a * dark + b * light, 0.0, 1.0);
 }
 return src;
}
 
vec3 gammaSP(vec3 src, float value) //value: 0~1
{
 return pow(src, vec3(value, value, value));
}

vec3 map_color(vec3 src, float lum)
{
    vec3 h = src - lum;
    if(src.r > 1.0)
    {
        float tmp = 1.0 - lum;
        h.g = h.g * tmp / h.r;
        h.b = h.b * tmp / h.r;
        h.r = tmp;
    }
    float t3r = h.b + lum;
    if(t3r < -0.00003)
    {
        src.rg = lum - h.rg * lum / h.b;
        src.b = 0.0;
    }
    else
    {
        src.rg = lum + h.rg;
        src.b = t3r;
    }
    return src;
}

vec3 dispatch(vec3 src)
{
    float lum = dot(src, vec3(0.299, 0.587, 0.114));
    if(src.g > src.b)
    {
        if(src.r > src.g)
        {
            src = map_color(src, lum);
        }
        else if(src.r > src.b)
        {
            src.grb = map_color(src.grb, lum);
        }
        else
        {
            src.gbr = map_color(src.gbr, lum);
        }
    }
    else
    {
        if(src.g > src.r)
        {
            src.bgr = map_color(src.bgr, lum);
        }
        else if(src.b > src.r)
        {
            src.brg = map_color(src.brg, lum);
        }
        else
        {
            src.rbg = map_color(src.rbg, lum);
        }
    }
    return src;
}

void main()
{
    vec3 src = texture2D(inputImageTexture, textureCoordinate).rgb;
    
    src = blackWhite(src);
    src = tableLookUp(src, SamplerTableTex1);
    src = levelSP(src, 48.0 / 255.0, 1.0);
    src = gammaSP(src, 1.0 / 1.10);
    gl_FragColor = vec4(dispatch(src), 1.0);
}
