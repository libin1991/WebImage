precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;

uniform float widthStep;
uniform float heightStep;

const float intensity = 0.45;

float getLum(vec3 src)
{
	return dot(src, vec3(0.299, 0.587, 0.114));
}

void main()
{
    mat3 m;
    vec3 src = texture2D(inputImageTexture, textureCoordinate).rgb;
    
    for(float i = -1.0; i < 2.0; ++i)
    {
    	for(float j = -1.0; j < 2.0; ++j)
    	{
    		m[int(i) + 1][int(j) + 1] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(widthStep*i, heightStep*j)).rgb);
    	}
    }
    float nx = m[0][0] + m[0][1] + m[0][2] - m[2][0] - m[2][1] - m[2][2];
    float ny = m[0][0] + m[1][0] + m[2][0] - m[0][2] - m[1][2] - m[2][2];
    float ndl = abs(nx + ny + intensity);
    float shade = 0.0;
    
	float norm = (nx * nx + ny * ny + intensity * intensity);
	shade = (ndl * 0.577) / sqrt(norm);
    
    gl_FragColor = vec4(shade,shade,shade, 1.0);
}