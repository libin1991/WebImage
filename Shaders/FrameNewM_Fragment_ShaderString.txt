/*
@ author: wysaid
@ blog: blog.wysaid.org
@ mail: admin@wysaid.org
@ date: 2013-9-27
*/

precision highp float;
varying vec2 textureCoordinate;
uniform sampler2D inputImageTexture;
uniform sampler2D SamplerFrameTexM;
uniform vec2 thickness;
uniform float frameLengthH;
uniform float frameLengthV;

uniform vec4 frameTex_M_0; //leftTop
uniform vec4 frameTex_M_1; //Top
uniform vec4 frameTex_M_2; //rightTop
uniform vec4 frameTex_M_3; //right
uniform vec4 frameTex_M_4; //rightBottom
uniform vec4 frameTex_M_5; //bottom
uniform vec4 frameTex_M_6; //leftBottom
uniform vec4 frameTex_M_7; //left

void main()
{
 	vec3 src = texture2D(inputImageTexture, textureCoordinate).rgb;
 	vec2 coord;
 	if(textureCoordinate.x <= thickness.x && textureCoordinate.y <= thickness.y)
    {
    	coord = textureCoordinate / thickness * frameTex_M_0.zw + frameTex_M_0.xy;
    	vec4 frameLeftTop = texture2D(SamplerFrameTexM, coord);
    	src = mix(src, frameLeftTop.rgb, frameLeftTop.a);
    }
    else if(textureCoordinate.x <= 1.0 - thickness.x && textureCoordinate.y <= thickness.y)
    {
    	coord = vec2(mod((textureCoordinate.x - thickness.x), frameLengthH) / frameLengthH, textureCoordinate.y / thickness.y) * frameTex_M_1.zw + frameTex_M_1.xy;
    	vec4 frameTop = texture2D(SamplerFrameTexM, coord);
    	src = mix(src, frameTop.rgb, frameTop.a);	
    }
    else if(textureCoordinate.y <= thickness.y)
    {
    	coord = vec2((textureCoordinate.x - 1.0 + thickness.x) / thickness.x, textureCoordinate.y / thickness.y) * frameTex_M_2.zw + frameTex_M_2.xy;
    	vec4 frameRightTop = texture2D(SamplerFrameTexM, coord);
    	src = mix(src, frameRightTop.rgb, frameRightTop.a);
    }
    else if(textureCoordinate.y <= 1.0 - thickness.y && textureCoordinate.x >= 1.0 - thickness.x)
    {
    	coord = vec2((textureCoordinate.x - 1.0 + thickness.x) / thickness.x, mod(textureCoordinate.y - thickness.y, frameLengthV) / frameLengthV) * frameTex_M_3.zw + frameTex_M_3.xy;
    	vec4 frameRight = texture2D(SamplerFrameTexM, coord);
    	src = mix(src, frameRight.rgb, frameRight.a);
    }
    else if(textureCoordinate.y <= 1.0 - thickness.y && textureCoordinate.x <= thickness.x)
    {
    	coord = vec2(textureCoordinate.x / thickness.x, mod(textureCoordinate.y - thickness.y, frameLengthV) / frameLengthV) * frameTex_M_7.zw + frameTex_M_7.xy;
    	vec4 frameLeft = texture2D(SamplerFrameTexM, coord);
    	src = mix(src, frameLeft.rgb, frameLeft.a);
    }
    else if(textureCoordinate.y >= 1.0 - thickness.y)
    {
    	if(textureCoordinate.x <= thickness.x)
    	{
    		coord = vec2(textureCoordinate.x / thickness.x, (textureCoordinate.y - 1.0 + thickness.y) / thickness.y) * frameTex_M_6.zw + frameTex_M_6.xy;
    		vec4 frameLeftBottom = texture2D(SamplerFrameTexM, coord);
    		src = mix(src, frameLeftBottom.rgb, frameLeftBottom.a);
    	}
    	else if(textureCoordinate.x <= 1.0 - thickness.x)
    	{
    		coord = vec2(mod(textureCoordinate.x - thickness.x, frameLengthH) / frameLengthH, (textureCoordinate.y - 1.0 + thickness.y) / thickness.y) * frameTex_M_5.zw + frameTex_M_5.xy;
    		vec4 frameBottom = texture2D(SamplerFrameTexM, coord);
    		src = mix(src, frameBottom.rgb, frameBottom.a);
    	}
    	else 
    	{
    		coord = (textureCoordinate - 1.0 + thickness) / thickness * frameTex_M_4.zw + frameTex_M_4.xy;
			vec4 frameRightBottom = texture2D(SamplerFrameTexM, coord);
			src = mix(src, frameRightBottom.rgb, frameRightBottom.a);
    	}
    }

    gl_FragColor = vec4(src, 1.0);
}