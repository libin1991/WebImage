precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;
uniform sampler2D SamplerTableTex1;
uniform sampler2D SamplerTableTex2;

uniform sampler2D SamplerBackTex1;
uniform sampler2D SamplerBackTex2;
uniform sampler2D SamplerBackTex3;

vec3 tableLookUp(vec3 src, sampler2D table)
{
    src.r = texture2D(table, vec2(src.r, 0.0)).r;
    src.g = texture2D(table, vec2(src.g, 0.0)).g;
    src.b = texture2D(table, vec2(src.b, 0.0)).b;
    return src;
}

vec3 screen(vec3 src1, vec3 src2, float alpha)
{
    return mix(src1, src1 + src2 - src1 * src2, alpha);
}

vec3 differences(vec3 src1, vec3 src2, vec3 alphas)
{
    src1.r = mix(src1.r, abs(src1 - src2).r, alphas.r);
    src1.g = mix(src1.g, abs(src1 - src2).g, alphas.g);
    src1.b = mix(src1.b, abs(src1 - src2).b, alphas.b);
    return src1;
}

vec3 overLay(vec3 src1, vec3 src2, float alpha)
{
    if(src1.r < 0.5)
        src2.r = (src1.r * src2.r) * 2.0;
    else src2.r = (src1.r + src2.r) * 2.0 - (src1.r * src2.r) * 2.0 - 1.0;
    
    if(src1.g < 0.5)
        src2.g = (src1.g * src2.g) * 2.0;
    else src2.g = (src1.g + src2.g) * 2.0 - (src1.g * src2.g) * 2.0 - 1.0;
    
    if(src1.b < 0.5)
        src2.b = (src1.b * src2.b) * 2.0;
    else src2.b = (src1.b + src2.b) * 2.0 - (src1.b * src2.b) * 2.0 - 1.0;
    
    return mix(src1, src2, alpha);
}

void main()
{
    vec3 src = texture2D(inputImageTexture, textureCoordinate).rgb;
    vec4 tex1 = texture2D(SamplerBackTex1, textureCoordinate);
    vec4 tex2 = texture2D(SamplerBackTex2, textureCoordinate);
    vec4 tex3 = texture2D(SamplerBackTex3, textureCoordinate);
    
    src = tableLookUp(src, SamplerTableTex1);
    src = screen(src, tex1.rgb, tex1.a);  //Beattle_Src
    
    vec3 tmp;
    tmp = tableLookUp(src, SamplerTableTex2);
    
    src = differences(src, tmp, tex2.rgb * tex2.a); //BLaky1
    
    src = clamp(src * mat3
                (
                 0.98, 0.68, -0.66,
                 0.98, 0.68, -0.66,
                 0.98, 0.68, -0.66
                 ) - 0.05, 0.0, 1.0);
    
    src = overLay(src, tex3.rgb, 0.5 * tex3.a);
    
    gl_FragColor = vec4(src, 1.0);
}
