precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;
uniform sampler2D SamplerBackTex1;
uniform  float saturate;
uniform  float bound_l;
uniform mediump float strength; // effect strength, blend with source, 0 -- 1, default is 1

const vec2 vignetteCenter = vec2(0.5, 0.5);   // the center for the vignette in tex coords (defaults to 0.5, 0.5)
uniform highp float vignetteStart;  // The normalized distance from the center where the vignette effect starts. Default of 0.
uniform highp float vignetteRange;  // The normalized range from the vignette effect start and ends. Default of 0.5.
uniform highp float aspectRatio;

void main(void)
{
    mediump vec3 src;
    mediump vec3 dst;
    mediump vec3 tmp_s;
    mediump float alpha;
    mediump float lum;
    mediump vec3 txt;
    
    src.rgb = texture2D(inputImageTexture, textureCoordinate).rgb;
    dst = src;
    
    highp vec2 smp_coord = textureCoordinate;
    //    smp_coord.x = v_texCoord.x*rangeW+rangeX;
    //    smp_coord.y = (v_texCoord.y*rangeH+rangeY) * kx/ky;
    txt = texture2D(SamplerBackTex1, smp_coord).rgb;
    
    //vignette
	highp vec2 v_texCoordVignette = textureCoordinate;
    highp vec2 textureCoordinateToUse = vec2(v_texCoordVignette.x, (v_texCoordVignette.y * aspectRatio + 0.5 - 0.5 * aspectRatio));
    highp float d = distance(textureCoordinateToUse, vec2(vignetteCenter.x, vignetteCenter.y));
    //highp float percent = smoothstep(vignetteStart, vignetteStart+vignetteRange, d);
    highp float percent = clamp((d-vignetteStart)/vignetteRange, 0.0, 1.0);
    alpha = 1.0-percent*percent;
    
    lum = dst.r*0.299 + dst.g*0.587 + dst.b*0.114;
    tmp_s = lum*(1.0-saturate) + saturate*dst;
    tmp_s = (tmp_s - bound_l)/saturate;
    dst = tmp_s;
    
    vec3 tmp_txt;
    tmp_txt.r = min(1.0,txt.r+dst.r);
    tmp_txt.g = min(1.0,txt.g+dst.g);
    tmp_txt.b = min(1.0,txt.b+dst.b);
    
    dst = dst*0.67 + tmp_txt*0.33;
    
    tmp_txt.r = abs(dst.r - txt.r);
    tmp_txt.g = abs(dst.g - txt.g);
    tmp_txt.b = abs(dst.b - txt.b);
    
    dst = dst*0.33 + tmp_txt*0.67;
    
    tmp_txt.r = 21716.0/32768.0;
    tmp_txt.g = 15934.0/32768.0;
    tmp_txt.b = 128.0/32768.0;
    
    dst = tmp_txt*(1.0-alpha) + dst*alpha;
    
    gl_FragColor = vec4(mix(src, dst, strength),1.0);
}