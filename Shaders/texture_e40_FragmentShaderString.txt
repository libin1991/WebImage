precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;
uniform sampler2D SamplerBackTex1;
uniform  float saturate;
uniform  float bound_l;
uniform mediump float strength; // effect strength, blend with source, 0 -- 1, default is 1
void main(void)
{
    mediump vec3 src; mediump vec3 dst;
    mediump vec3 tmp_s;
    mediump float alpha;
    mediump float lum;
    mediump vec4 txt;
    
    src.rgb = texture2D(inputImageTexture, textureCoordinate).rgb;
    dst = src;
    
    highp vec2 smp_coord = textureCoordinate;
    //    smp_coord.x = v_texCoord.x*rangeW+rangeX;
    //    smp_coord.y = (v_texCoord.y*rangeH+rangeY) * kx/ky;
    txt.rgba = texture2D(SamplerBackTex1, smp_coord).abgr;
    
    lum = dst.r*0.299 + dst.g*0.587 + dst.b*0.114;
    tmp_s = lum*(1.0-saturate) + saturate*dst;
    tmp_s = (tmp_s - bound_l)/saturate;
    dst = tmp_s;
    
    dst.r = min(1.0,dst.r);
    dst.g = min(1.0,dst.g);
    dst.b = min(1.0,dst.b);
    
	dst.r = dst.r * dst.r;
	dst.g = dst.g * dst.g;
	dst.b = dst.b * dst.b;
    
    vec3 tmp2_pic;
    if(dst.r < 0.5)
    {
        tmp2_pic.r = 2.0*(dst.r * txt.r);
    }
    else
    {
        tmp2_pic.r = 2.0*(dst.r + txt.r) - dst.r * txt.r * 2.0 - 1.0;
    }
    if(dst.g < 0.5)
    {
        tmp2_pic.g = dst.g * txt.g * 2.0;
    }
    else
    {
        tmp2_pic.g = 2.0*(dst.g + txt.g) - dst.g * txt.g * 2.0 - 1.0;
    }
    if(dst.b < 0.5)
    {
        tmp2_pic.b = dst.b * txt.b * 2.0;
    }
    else
    {
        tmp2_pic.b = 2.0*(dst.b + txt.b) - dst.b * txt.b * 2.0 - 1.0;
    }
    
    dst = dst * (1.0 - txt.a) + tmp2_pic * txt.a;
    
    gl_FragColor = vec4(mix(src, dst, strength),1.0);
}