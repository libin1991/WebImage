
precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;
uniform sampler2D SamplerTableTex1;

uniform mediump float saturate;
uniform mediump float bound_l;
uniform mediump float strength; // effect strength, blend with source, 0 -- 1, default is 1

const vec2 vignetteCenter = vec2(0.5, 0.5);   // the center for the vignette in tex coords (defaults to 0.5, 0.5)
uniform highp float vignetteStart;  // The normalized distance from the center where the vignette effect starts. Default of 0.
uniform highp float vignetteRange;  // The normalized range from the vignette effect start and ends. Default of 0.5.
uniform highp float aspectRatio;

void main(void)
{
    mediump vec3 src;
    mediump vec3 dst;
    mediump vec3 tmp_s;
    mediump float alpha;
    mediump float lum;
    
    src.rgb = texture2D(inputImageTexture, textureCoordinate).rgb;
    dst = src;
    
    //vignette

    highp float d = distance(textureCoordinate, vignetteCenter);
    highp float percent = clamp((d-vignetteStart)/vignetteRange, 0.0, 1.0);
    alpha = 1.0 -percent * percent;
    
    lum = dst.r*0.299 + dst.g*0.587 + dst.b*0.114;
    tmp_s = lum*(1.0-saturate) + saturate*dst;
    tmp_s = (tmp_s - bound_l)/saturate;
    dst = tmp_s * alpha;
    
    dst.r = texture2D(SamplerTableTex1,vec2(dst.r,0.0)).r;  // note rgb -> bgr?
    dst.g = texture2D(SamplerTableTex1,vec2(dst.g,0.0)).g;
    dst.b = texture2D(SamplerTableTex1,vec2(dst.b,0.0)).b;
    
    gl_FragColor = vec4(mix(src, dst, strength),1.0);
}