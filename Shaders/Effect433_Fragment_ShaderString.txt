precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;

uniform float strength;

const vec3 textureColor = vec3(0.957, 0.58, 1.0);

vec3 blackWhite(vec3 src)
{
 float f = (max(max(src.r, src.g), src.b) + min(min(src.r, src.g), src.b)) / 2.0;
 return vec3(f, f, f);
}

vec3 overLay(vec3 src1, vec3 src2, float alpha)
{
 if(src1.r < 0.5)
     src2.r = (src1.r * src2.r) * 2.0;
 else src2.r = (src1.r + src2.r) * 2.0 - (src1.r * src2.r) * 2.0 - 1.0;
 
 if(src1.g < 0.5)
     src2.g = (src1.g * src2.g) * 2.0;
 else src2.g = (src1.g + src2.g) * 2.0 - (src1.g * src2.g) * 2.0 - 1.0;
 
 if(src1.b < 0.5)
     src2.b = (src1.b * src2.b) * 2.0;
 else src2.b = (src1.b + src2.b) * 2.0 - (src1.b * src2.b) * 2.0 - 1.0;
 
 return mix(src1, src2, alpha);
}

void main()
{
    vec3 src = texture2D(inputImageTexture, textureCoordinate).rgb;
    src = blackWhite(src);
    src = overLay(src, textureColor, 0.3);
    gl_FragColor = vec4(src, 1.0);
}