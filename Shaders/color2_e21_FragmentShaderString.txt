precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;

uniform float widthStep;
uniform float heightStep;

const vec2 vignetteCenter = vec2(0.5, 0.5);

vec3 hardLight(vec3 src1, vec3 src2, float alpha)
{
 if(src2.r < 0.5)
     src2.r = (src1.r * src2.r) * 2.0;
 else src2.r = (src1.r + src2.r) * 2.0 - (src1.r * src2.r) * 2.0 - 1.0;
 
 if(src2.g < 0.5)
     src2.g = (src1.g * src2.g) * 2.0;
 else src2.g = (src1.g + src2.g) * 2.0 - (src1.g * src2.g) * 2.0 - 1.0;
 
 if(src2.b < 0.5)
     src2.b = (src1.b * src2.b) * 2.0;
 else src2.b = (src1.b + src2.b) * 2.0 - (src1.b * src2.b) * 2.0 - 1.0;
 
 return mix(src1, src2, alpha);
}

void main(void)
{
    vec3 src = texture2D(inputImageTexture, textureCoordinate).rgb;
    float max_r = 0.87055 / min(widthStep, heightStep);
    float lens_fac = max_r * max_r;
    float lens_facinv = 1073741824.0 / lens_fac;
    float lens_amount = 102.0;
    float dis = length(textureCoordinate - vignetteCenter);
    float bd = (lens_fac + dis) * lens_facinv / 262144.0;
    bd = bd * bd / 1024.0;
    bd = 536870912.0 / bd;
    float alpha = 1.0 + lens_amount*(bd - 32768.0)/256.0/32768.0;
    alpha = clamp(alpha, 0.0, 1.0);
    src *= alpha;

    float lum = dot(src, vec3(0.299, 0.587, 0.114));
    vec3 tmp = vec3(lum, lum, 1.0 - lum);
    src = hardLight(src, tmp, 0.5);
    gl_FragColor = vec4(src,1.0);
}