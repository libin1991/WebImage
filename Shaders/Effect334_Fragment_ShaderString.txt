precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;
uniform sampler2D SamplerTableTex1;

uniform sampler2D SamplerBackTex1;
uniform sampler2D SamplerBackTex2;
uniform sampler2D SamplerBackTex3;
uniform sampler2D SamplerBackTex4;
uniform sampler2D SamplerBackTex5;
uniform sampler2D SamplerBackTex6;

vec3 tableLookUp(vec3 src, sampler2D table)
{
 src.r = texture2D(table, vec2(src.r, 0.0)).r;
 src.g = texture2D(table, vec2(src.g, 0.0)).g;
 src.b = texture2D(table, vec2(src.b, 0.0)).b;
 return src;
}
vec3 softLight(vec3 src1, vec3 src2, float alpha)
{
 if(src2.r < 0.5)
     src2.r = (src2.r * 2.0 - 1.0) * (src1.r - (src1.r * src1.r)) + src1.r;
 else src2.r = ((src2.r * 2.0 - 1.0) * (sqrt(src1.r) - src1.r)) + src1.r;
 
 if(src2.g < 0.5)
     src2.g = (src2.g * 2.0 - 1.0) * (src1.g - (src1.g * src1.g)) + src1.g;
 else src2.g = ((src2.g * 2.0 - 1.0) * (sqrt(src1.g) - src1.g)) + src1.g;
 
 if(src2.b < 0.5)
     src2.b = (src2.b * 2.0 - 1.0) * (src1.b - (src1.b * src1.b)) + src1.b;
 else src2.b = ((src2.b * 2.0 - 1.0) * (sqrt(src1.b) - src1.b)) + src1.b;
 
 return mix(src1, src2, alpha);
}

void main()
{
    vec3 src = texture2D(inputImageTexture, textureCoordinate).rgb;
    vec4 tex1 = texture2D(SamplerBackTex1, textureCoordinate);
    vec4 tex2 = texture2D(SamplerBackTex2, textureCoordinate);
    vec4 tex3 = texture2D(SamplerBackTex3, textureCoordinate);
    vec4 tex4 = texture2D(SamplerBackTex4, textureCoordinate);
    vec4 tex5 = texture2D(SamplerBackTex5, textureCoordinate);
    vec4 tex6 = texture2D(SamplerBackTex6, textureCoordinate);

    src = tableLookUp(src, SamplerTableTex1);
    src = mix(src, tex1.rgb, 0.5 * tex1.a);
    src = softLight(src, tex2.rgb, 0.4 * tex2.a);
    src = softLight(src, tex3.rgb, 0.5 * tex3.a);
    src = mix(src, tex4.rgb, tex4.a);
    src = softLight(src, tex5.rgb, 0.25 * tex5.a);
    src = mix(src, tex6.rgb, 0.15 * tex6.a);
    gl_FragColor = vec4(src, 1.0);
}
