precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;

uniform float strength;

const vec3 textureColor = vec3(0.8112, 0.243, 1.0);

vec3 screen(vec3 src1, vec3 src2, float alpha)
{
 return mix(src1, src1 + src2 - src1 * src2, alpha);
}

vec3 RGB2HSL(vec3 src)
{
 float maxc = max(max(src.r, src.g), src.b);
 float minc = min(min(src.r, src.g), src.b);
 float L = (maxc + minc) / 2.0;
 if(maxc == minc)
 return vec3(0.0, 0.0, L);
 float H, S;
 
 if(L < 0.5)
 S = (maxc - minc) / (maxc + minc);
 else
 S = (maxc - minc) / (2.0 - maxc - minc);
 
 if(maxc == src.r)
 H = (src.g - src.b) / (maxc - minc);
 else if(maxc == src.g)
 H = 2.0 + (src.b - src.r) / (maxc - minc);
 else
 H = 4.0 + (src.r - src.g) / (maxc - minc);
 H *= 60.0;
 if(H < 0.0) H += 360.0;
 return vec3(H / 360.0, S, L); // H(0~360), S(0~1), L(0~1)
}

vec3 HSL2RGB(vec3 src) // H, S, L
{
 if(src.y <= 0.0)
 return vec3(src.z, src.z, src.z);
 float q = (src.z < 0.5) ? src.z * (1.0 + src.y) : (src.z + src.y - (src.y * src.z));
 float p = 2.0 * src.z - q;
 
 vec3 dst = vec3(src.x + 0.333, src.x, src.x - 0.333);
 
 if(dst.r < 0.0) dst.r += 1.0;
 else if(dst.r > 1.0) dst.r -= 1.0;
 
 if(dst.g < 0.0) dst.g += 1.0;
 else if(dst.g > 1.0) dst.g -= 1.0;
 
 if(dst.b < 0.0) dst.b += 1.0;
 else if(dst.b > 1.0) dst.b -= 1.0;
 
 if(dst.r < 1.0 / 6.0)
 dst.r = p + (q - p) * 6.0 * dst.r;
 else if(dst.r < 0.5)
 dst.r = q;
 else if(dst.r < 2.0 / 3.0)
 dst.r = p + (q - p) * ((2.0 / 3.0) - dst.r) * 6.0;
 else dst.r = p;
 
 if(dst.g < 1.0 / 6.0)
 dst.g = p + (q - p) * 6.0 * dst.g;
 else if(dst.g < 0.5)
 dst.g = q;
 else if(dst.g < 2.0 / 3.0)
 dst.g = p + (q - p) * ((2.0 / 3.0) - dst.g) * 6.0;
 else dst.g = p;
 
 if(dst.b < 1.0 / 6.0)
 dst.b = p + (q - p) * 6.0 * dst.b;
 else if(dst.b < 0.5)
 dst.b = q;
 else if(dst.b < 2.0 / 3.0)
 dst.b = p + (q - p) * ((2.0 / 3.0) - dst.b) * 6.0;
 else dst.b = p;
 
 return dst;
}

vec3 adjustColor(vec3 src, float hue, float sat) //hue should be positive
{
 src = RGB2HSL(src);
 src.x += hue;
 src.y += sat;
 return HSL2RGB(src);
}

void main()
{
    vec3 src = texture2D(inputImageTexture, textureCoordinate).rgb;
    src = adjustColor(src, 0.0, -0.3);
    src = screen(src, textureColor, 0.4);
    gl_FragColor = vec4(src, 1.0);
}