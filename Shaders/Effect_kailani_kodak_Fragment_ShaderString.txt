precision mediump float;
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;
uniform sampler2D SamplerTableTex1;
uniform sampler2D SamplerTableTex2;
uniform sampler2D SamplerBackTex1;

uniform sampler2D SamplerTableTex3;

vec3 tableLookUp(vec3 src, sampler2D table)
{
    src.r = texture2D(table, vec2(src.r, 0.0)).r;
    src.g = texture2D(table, vec2(src.g, 0.0)).g;
    src.b = texture2D(table, vec2(src.b, 0.0)).b;
    return src;
}

vec3 overLay(vec3 src1, vec3 src2, float alpha)
{
    if(src1.r < 0.5)
        src2.r = (src1.r * src2.r) * 2.0;
    else src2.r = (src1.r + src2.r) * 2.0 - (src1.r * src2.r) * 2.0 - 1.0;
    
    if(src1.g < 0.5)
        src2.g = (src1.g * src2.g) * 2.0;
    else src2.g = (src1.g + src2.g) * 2.0 - (src1.g * src2.g) * 2.0 - 1.0;
    
    if(src1.b < 0.5)
        src2.b = (src1.b * src2.b) * 2.0;
    else src2.b = (src1.b + src2.b) * 2.0 - (src1.b * src2.b) * 2.0 - 1.0;
    
    return mix(src1, src2, alpha);
}

vec3 softLight(vec3 src1, vec3 src2, float alpha)
{
    if(src2.r < 0.5)
        src2.r = (src2.r * 2.0 - 1.0) * (src1.r - (src1.r * src1.r)) + src1.r;
    else src2.r = ((src2.r * 2.0 - 1.0) * (sqrt(src1.r) - src1.r)) + src1.r;
    
    if(src2.g < 0.5)
        src2.g = (src2.g * 2.0 - 1.0) * (src1.g - (src1.g * src1.g)) + src1.g;
    else src2.g = ((src2.g * 2.0 - 1.0) * (sqrt(src1.g) - src1.g)) + src1.g;
    
    if(src2.b < 0.5)
        src2.b = (src2.b * 2.0 - 1.0) * (src1.b - (src1.b * src1.b)) + src1.b;
    else src2.b = ((src2.b * 2.0 - 1.0) * (sqrt(src1.b) - src1.b)) + src1.b;
    
    return mix(src1, src2, alpha);
}

vec3 saturateAdobeFilter(vec3 src, float k)
{
    float maxV;
    float minV;
    if(src.r > src.g)
    {
        maxV = max(src.r, src.b);
        minV = min(src.g, src.b);
    }
    else
    {
        maxV = max(src.g, src.b);
        minV = min(src.r, src.b);
    }
    float sumV = maxV + minV;
    float lum = dot(src, vec3(0.299, 0.587, 0.114));
    
    src = mix(vec3(lum, lum, lum), src, k);
    
    if(src.r > src.g)
    {
        maxV = max(src.r, src.b);
        minV = min(src.g, src.b);
    }
    else
    {
        maxV = max(src.g, src.b);
        minV = min(src.r, src.b);
    }
    
    lum = (sumV - (maxV + minV)) / 2.0;
    
    return (src + lum);
}

void main()
{
    vec3 src = texture2D(inputImageTexture, textureCoordinate).rgb;
    vec4 tex1 = texture2D(SamplerBackTex1, textureCoordinate);
    
    vec3 tmp = tableLookUp(src, SamplerTableTex1);
    src = overLay(src, tmp, 1.0);
    src = softLight(src, tex1.rgb, tex1.a);
    src = saturateAdobeFilter(src, 0.7);
    
    src = tableLookUp(src, SamplerTableTex2);
    src = tableLookUp(src, SamplerTableTex3);
    
    gl_FragColor = vec4(src, 1.0);
}